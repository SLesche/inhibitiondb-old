forward_data = data.frame(
table = forward_tables,
ids = forward_ids,
mode = "forward",
origin = id_name
)
}
backward_data = data.frame()
if (length(backward_tables) != 0){
backward_data = data.frame(
table = backward_tables,
ids = backward_ids,
mode = "backward",
origin = id_name
)
}
other_table_data = data.frame()
if (length(forward_tables) != 0 & length(backward_tables) != 0){
other_table_data = rbind(forward_data, backward_data)
} else if (length(forward_tables) == 0 & length(backward_tables) != 0){
other_table_data = backward_data
} else if (length(forward_tables) != 0 & length(backward_tables) == 0){
other_table_data = forward_data
}
newlist = list()
if (nrow(other_table_data) != 0){
for (j in 1:nrow(other_table_data)){
newlist = list()
newlist$table = other_table_data$table[j]
if (other_table_data$mode[j] == "backward"){
newlist$ids = unique(relevant_ids[, other_table_data$origin[j]])
} else {
newlist$ids = unique(relevant_ids[, other_table_data$ids[j]])
}
newlist$mode = other_table_data$mode[j]
newlist$origin_id = other_table_data$origin[j]
query = c(query, list(newlist))
}
}
# Increase max_i
max_i = max_i + 1
print(paste("Query", i, "done"))
}
i = 2
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
# Filter to only include the relevant ids
if (mode == "backward"){
relevant_ids = extract_table_ids(conn, table_to_query, origin_id, matching_ids)
} else {
relevant_ids = extract_table_ids(conn, table_to_query, id_name, matching_ids)
}
# Add the table-primary key to the ids-list
# Need to do this vector approach to combat no dataframe being extracted above
if (is.vector(relevant_ids)){
relevant_ids = as.data.frame(relevant_ids)
colnames(relevant_ids) = id_name
}
id_list[[table_to_query]] = unique(relevant_ids[[id_name]])
# Add the table-name to the done-list
done = c(done, table_to_query)
done = unique(done)
# Get finished ids
finished_ids = c()
for (j in 1:length(query)){
finished_ids[j] = return_id_name_from_table(query[[j]]$table)
}
finished_tables = c()
for (j in 1:length(finished_ids)){
finished_tables[j] = return_table_name_from_id(finished_ids[j])
}
# Get all other tables that need to be queried
# This is a forward search
forward_ids = colnames(relevant_ids)[!colnames(relevant_ids) %in% finished_ids]
forward_tables = c()
if (length(forward_ids) != 0){
for (j in 1:length(forward_ids)){
forward_tables[j] = return_table_name_from_id(forward_ids[j])
}
}
# Need to add backward search aswell
backward_tables = find_relevant_tables(conn, id_name)
backward_tables = backward_tables[!backward_tables %in% finished_tables]
backward_ids = c()
if (length(backward_tables) != 0){
for (j in 1:length(backward_tables)){
backward_ids[j] = return_id_name_from_table(backward_tables[j])
}
}
forward_data = data.frame()
if (length(forward_tables) != 0){
forward_data = data.frame(
table = forward_tables,
ids = forward_ids,
mode = "forward",
origin = id_name
)
}
backward_data = data.frame()
if (length(backward_tables) != 0){
backward_data = data.frame(
table = backward_tables,
ids = backward_ids,
mode = "backward",
origin = id_name
)
}
other_table_data = data.frame()
if (length(forward_tables) != 0 & length(backward_tables) != 0){
other_table_data = rbind(forward_data, backward_data)
} else if (length(forward_tables) == 0 & length(backward_tables) != 0){
other_table_data = backward_data
} else if (length(forward_tables) != 0 & length(backward_tables) == 0){
other_table_data = forward_data
}
newlist = list()
if (nrow(other_table_data) != 0){
for (j in 1:nrow(other_table_data)){
newlist = list()
newlist$table = other_table_data$table[j]
if (other_table_data$mode[j] == "backward"){
newlist$ids = unique(relevant_ids[, other_table_data$origin[j]])
} else {
newlist$ids = unique(relevant_ids[, other_table_data$ids[j]])
}
newlist$mode = other_table_data$mode[j]
newlist$origin_id = other_table_data$origin[j]
query = c(query, list(newlist))
}
}
# Increase max_i
max_i = max_i + 1
print(paste("Query", i, "done"))
query
i = 3
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
# Filter to only include the relevant ids
if (mode == "backward"){
relevant_ids = extract_table_ids(conn, table_to_query, origin_id, matching_ids)
} else {
relevant_ids = extract_table_ids(conn, table_to_query, id_name, matching_ids)
}
# Add the table-primary key to the ids-list
# Need to do this vector approach to combat no dataframe being extracted above
if (is.vector(relevant_ids)){
relevant_ids = as.data.frame(relevant_ids)
colnames(relevant_ids) = id_name
}
id_list[[table_to_query]] = unique(relevant_ids[[id_name]])
# Add the table-name to the done-list
done = c(done, table_to_query)
done = unique(done)
# Get finished ids
finished_ids = c()
for (j in 1:length(query)){
finished_ids[j] = return_id_name_from_table(query[[j]]$table)
}
finished_tables = c()
for (j in 1:length(finished_ids)){
finished_tables[j] = return_table_name_from_id(finished_ids[j])
}
# Get all other tables that need to be queried
# This is a forward search
forward_ids = colnames(relevant_ids)[!colnames(relevant_ids) %in% finished_ids]
forward_tables = c()
if (length(forward_ids) != 0){
for (j in 1:length(forward_ids)){
forward_tables[j] = return_table_name_from_id(forward_ids[j])
}
}
# Need to add backward search aswell
backward_tables = find_relevant_tables(conn, id_name)
backward_tables = backward_tables[!backward_tables %in% finished_tables]
backward_ids = c()
if (length(backward_tables) != 0){
for (j in 1:length(backward_tables)){
backward_ids[j] = return_id_name_from_table(backward_tables[j])
}
}
forward_data = data.frame()
if (length(forward_tables) != 0){
forward_data = data.frame(
table = forward_tables,
ids = forward_ids,
mode = "forward",
origin = id_name
)
}
backward_data = data.frame()
if (length(backward_tables) != 0){
backward_data = data.frame(
table = backward_tables,
ids = backward_ids,
mode = "backward",
origin = id_name
)
}
other_table_data = data.frame()
if (length(forward_tables) != 0 & length(backward_tables) != 0){
other_table_data = rbind(forward_data, backward_data)
} else if (length(forward_tables) == 0 & length(backward_tables) != 0){
other_table_data = backward_data
} else if (length(forward_tables) != 0 & length(backward_tables) == 0){
other_table_data = forward_data
}
newlist = list()
if (nrow(other_table_data) != 0){
for (j in 1:nrow(other_table_data)){
newlist = list()
newlist$table = other_table_data$table[j]
if (other_table_data$mode[j] == "backward"){
newlist$ids = unique(relevant_ids[, other_table_data$origin[j]])
} else {
newlist$ids = unique(relevant_ids[, other_table_data$ids[j]])
}
newlist$mode = other_table_data$mode[j]
newlist$origin_id = other_table_data$origin[j]
query = c(query, list(newlist))
}
}
# Increase max_i
max_i = max_i + 1
print(paste("Query", i, "done"))
i = 4
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
# Filter to only include the relevant ids
if (mode == "backward"){
relevant_ids = extract_table_ids(conn, table_to_query, origin_id, matching_ids)
} else {
relevant_ids = extract_table_ids(conn, table_to_query, id_name, matching_ids)
}
# Add the table-primary key to the ids-list
# Need to do this vector approach to combat no dataframe being extracted above
if (is.vector(relevant_ids)){
relevant_ids = as.data.frame(relevant_ids)
colnames(relevant_ids) = id_name
}
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
id_name
id_name
mode
table_to_query
id_name
matching_ids
table = "within_table"
variable = id_name
id_vector = matching_ids
which_columns_exist_query = paste0("PRAGMA table_info(", table, ")")
which_columns_exist_query
table_columns = DBI::dbGetQuery(conn, which_columns_exist_query)
table_columns
ends_in_id = table_columns$name[grep("_id$", table_columns$name)]
ends_in_id_sql = paste(ends_in_id, collapse = ", ")
id_str = paste0(id_vector, collapse = ",")
is.null(variable) & is.null(id_vector)
!is.null(variable) & !is.null(id_vector)
sql_statement = sprintf("SELECT %s FROM %s WHERE %s IN (%s)", ends_in_id_sql, table, variable, id_str)
sql_statement
ids = DBI::dbGetQuery(conn, sql_statement)
dbGetQuery(conn, "SELECT within_id, dataset_id FROM within_table WHERE within_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,52,51,41,42,43,NA,45,46,47,54,53,55,56,57)")
dbGetQuery(conn, "SELECT within_id FROM within_table WHERE within_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,52,51,41,42,43,NA,45,46,47,54,53,55,56,57)")
dbGetQuery(conn, "SELECT * FROM within_table WHERE within_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,52,51,41,42,43,NA,45,46,47,54,53,55,56,57)")
dbGetQuery(conn, "SELECT * FROM observation_table WHERE within_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,52,51,41,42,43,NA,45,46,47,54,53,55,56,57)")
dbGetQuery(conn, "SELECT * FROM within_table WHERE dataset_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,52,51,41,42,43,NA,45,46,47,54,53,55,56,57)")
dbGetQuery(conn, "SELECT * FROM within_table WHERE dataset_id IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,50,52,51,41,42,43,45,46,47,54,53,55,56,57)")
query
i = 2
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
# Filter to only include the relevant ids
if (mode == "backward"){
relevant_ids = extract_table_ids(conn, table_to_query, origin_id, matching_ids)
} else {
relevant_ids = extract_table_ids(conn, table_to_query, id_name, matching_ids)
}
# Add the table-primary key to the ids-list
# Need to do this vector approach to combat no dataframe being extracted above
if (is.vector(relevant_ids)){
relevant_ids = as.data.frame(relevant_ids)
colnames(relevant_ids) = id_name
}
id_list[[table_to_query]] = unique(relevant_ids[[id_name]])
# Add the table-name to the done-list
done = c(done, table_to_query)
done = unique(done)
# Get finished ids
finished_ids = c()
for (j in 1:length(query)){
finished_ids[j] = return_id_name_from_table(query[[j]]$table)
}
finished_tables = c()
for (j in 1:length(finished_ids)){
finished_tables[j] = return_table_name_from_id(finished_ids[j])
}
# Get all other tables that need to be queried
# This is a forward search
forward_ids = colnames(relevant_ids)[!colnames(relevant_ids) %in% finished_ids]
forward_tables = c()
if (length(forward_ids) != 0){
for (j in 1:length(forward_ids)){
forward_tables[j] = return_table_name_from_id(forward_ids[j])
}
}
# Need to add backward search aswell
backward_tables = find_relevant_tables(conn, id_name)
backward_tables = backward_tables[!backward_tables %in% finished_tables]
backward_ids = c()
if (length(backward_tables) != 0){
for (j in 1:length(backward_tables)){
backward_ids[j] = return_id_name_from_table(backward_tables[j])
}
}
forward_data = data.frame()
if (length(forward_tables) != 0){
forward_data = data.frame(
table = forward_tables,
ids = forward_ids,
mode = "forward",
origin = id_name
)
}
backward_data = data.frame()
if (length(backward_tables) != 0){
backward_data = data.frame(
table = backward_tables,
ids = backward_ids,
mode = "backward",
origin = id_name
)
}
relevant_ids
i = 3
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
# Filter to only include the relevant ids
if (mode == "backward"){
relevant_ids = extract_table_ids(conn, table_to_query, origin_id, matching_ids)
} else {
relevant_ids = extract_table_ids(conn, table_to_query, id_name, matching_ids)
}
relevant_ids
query
i = 1
table_to_query = query[[i]]$table
matching_ids = query[[i]]$ids
mode = query[[i]]$mode
origin_id = query[[i]]$origin_id
print(paste("Starting query of table:", table_to_query))
# Get their id-names
id_name = return_id_name_from_table(table_to_query)
# Filter to only include the relevant ids
if (mode == "backward"){
relevant_ids = extract_table_ids(conn, table_to_query, origin_id, matching_ids)
} else {
relevant_ids = extract_table_ids(conn, table_to_query, id_name, matching_ids)
}
relevant_ids
relevant_ids %>% filter(is.na(within_id))
relevant_ids %>% filter(is.na(within_id)) %>% count(dataset_id)
test = c(NA, 1:10, 1:10)
test
unique(test)
unique(test, na.rm = TRUE)
unique(test)
unique(test)[!is.na(tes)]
unique(test)[!is.na(test)]
unique(test)
unique(test)[!is.na(unique(test))]
devtools::load_all()
library(DBI)
library(RSQLite)
library(dplyr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
conn = DBI::dbConnect(RSQLite::SQLite(), "../../initial_db.db")
arguments = list()
arguments %<>%
add_argument(
.,
conn = conn,
variable = "accuracy",
operator = "equal",
values = c(1)
) %>%
add_argument(
.,
conn = conn,
variable = "n_participants",
manual = TRUE,
statement = "SELECT dataset_id FROM dataset_table WHERE n_participants > 500"
) %>%
add_argument(
.,
conn = conn,
variable = "percentage_female",
operator = "between",
values = c(0.2, 0.8)
) %>%
add_argument(
.,
conn = conn,
variable = "task_name",
operator = "equal",
values = c("stroop", "flanker")
) %>%
add_argument(
.,
conn = conn,
variable = "n_tasks",
operator = "greater",
values = c(4)
)
test = query_db(
conn,
arguments
)
test_df = merge_query_results(test)
test_df
View(test_df)
test
# Library
library(dplyr)
library(RSQLite)
library(DBI)
# Getting info on lists
data_folder_path = "./Create_db/add_data/"
list_files = list.files(data_folder_path, "(list).*(RData)", full.names = TRUE)
lists = vector(mode = "list", length = length(list_files))
devtools::load_all()
library(DBI)
library(RSQLite)
library(dplyr)
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
conn = DBI::dbConnect(RSQLite::SQLite(), "../../initial_db.db")
arguments = list()
arguments %<>%
add_argument(.,
conn = conn,
variable = "dataset_id",
operator = "equal",
values = c(37))
arguments <- arguments %>%
add_argument(.,
conn = conn,
variable = "dataset_id",
operator = "equal",
values = c(37))
arguments
variable = "dataset_id"
# First find out which table the variable is from
table = find_relevant_tables(conn, variable)
# if the variable is an id-name, it should be filtered in its table
is_table = return_table_name_from_id(variable)
is_table
return_table_name_from_id("garbage")
dbListTables(conn)
devtools::load_all()
library(DBI)
library(RSQLite)
library(dplyr)
# setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# conn = DBI::dbConnect(RSQLite::SQLite(), "../../initial_db.db")
conn = DBI::dbConnect(RSQLite::SQLite(), "./initial_db.db")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
conn = DBI::dbConnect(RSQLite::SQLite(), "../../initial_db.db")
arguments = list()
arguments <- arguments %>%
add_argument(.,
conn = conn,
variable = "dataset_id",
operator = "equal",
values = c(37))
arguments
test = query_db(
conn,
arguments
)
test
test_df = merge_query_results(test)
test_df %>% filter(is.na(within_id))
